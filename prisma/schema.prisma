// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    
  lastname    String
  email       String    @unique
  password    String
  age Int?
  bio         String?
  profilePic  String?
  createdAt   DateTime  @default(now())
  posts       Post[]
  likes       Like[]
  comments    Comment[]
  followers   Follow[]  @relation("followers")
  following   Follow[]  @relation("following")
  retweets    Retweet[]

  // Followers Follow[] @relation("followers")
  // following Follow[] @relation("following")
}

model Post {
  id          Int       @id @default(autoincrement())
  content     String
  mediaUrl    String?
  createdAt   DateTime  @default(now())
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int
  likes       Like[]
  comments    Comment[]
  retweets    Retweet[]
}

model Follow {
  id           Int     @id @default(autoincrement())
  follower     User    @relation("followers", fields: [followerId], references: [id])
  followerId   Int
  following    User    @relation("following", fields: [followingId], references: [id])
  followingId  Int
  followedAt    DateTime @default(now())

  @@unique([followerId, followingId])
}

model Like {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id])
  userId   Int
  post     Post    @relation(fields: [postId], references: [id])
  postId   Int
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Comment {
  id       Int     @id @default(autoincrement())
  content  String
  user     User    @relation(fields: [userId], references: [id])
  userId   Int
  post     Post    @relation(fields: [postId], references: [id])
  postId   Int
  createdAt DateTime @default(now())
}

model Retweet {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id])
  userId   Int
  post     Post    @relation(fields: [postId], references: [id])
  postId   Int
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}
